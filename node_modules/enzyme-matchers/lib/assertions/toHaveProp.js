'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _deepEqualIdent = require('deep-equal-ident');

var _deepEqualIdent2 = _interopRequireDefault(_deepEqualIdent);

var _name = require('../utils/name');

var _name2 = _interopRequireDefault(_name);

var _stringify = require('../utils/stringify');

var _stringify2 = _interopRequireDefault(_stringify);

var _single = require('../utils/single');

var _single2 = _interopRequireDefault(_single);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

/**
 * This source code is licensed under the MIT-style license found in the
 * LICENSE file in the root directory of this source tree. *
 *
 * @providesModule toHavePropAssertion
 * 
 */

function toHaveProp(enzymeWrapper, propKey, propValue) {
  var props = enzymeWrapper.props();

  var contextualInformation = {
    actual: `Actual: ${(0, _stringify2.default)({ [propKey]: props[propKey] })}`,
    expected: `Expected: ${(0, _stringify2.default)({ [propKey]: propValue })}`
  };

  // error if the prop doesnt exist
  if (!props.hasOwnProperty(propKey)) {
    contextualInformation.actual = '';

    return {
      pass: false,
      message: `Expected wrapper to have prop "${propKey}", but it did not.`,
      negatedMessage: `Expected wrapper not to have prop "${propKey}", but it did.`,
      contextualInformation
    };
  }

  // key exists given above check, and we're not validating over values,
  // so its always true
  if (propValue === undefined) {
    return {
      pass: true,
      message: `Expected wrapper to have any value for the prop "${propKey}"`,
      negatedMessage: `Expected wrapper not to receive the prop "${propKey}"`,
      contextualInformation
    };
  }

  var pass = (0, _deepEqualIdent2.default)(props[propKey], propValue);

  return {
    pass,
    message: `Expected <${(0, _name2.default)(enzymeWrapper)}> "${propKey}" prop values to match (using npm.deepEqualIdent) but they didn't.`,
    negatedMessage: `Expected <${(0, _name2.default)(enzymeWrapper)}> "${propKey}" prop values not to match (using npm.deepEqualIdent), but they did.`,
    contextualInformation
  };
}

exports.default = (0, _single2.default)(toHaveProp);
module.exports = exports['default'];